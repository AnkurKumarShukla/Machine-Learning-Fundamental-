# -*- coding: utf-8 -*-
"""HousePricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R_sm16jX16Kon-PCaRMzx1zEPT-_Yyll
"""



"""# House Price Perdiction üè° = ‚ùì üí∞

\
###Import basic library




"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

"""### Read and VISUALISE  data"""

dataset = pd.read_csv("data.csv")
dataset.head()

!pip install sweetviz

"""###this is third party module to visualise large data"""

import sweetviz as sv

report= sv.analyze(dataset)
report.show_html("\report.html")

# other ways to visualize 
dataset.hist(bins=50, figsize=(10, 8))
plt.show()

"""###now we know address data do not affect target"""

# removing address column
x = dataset.iloc[:,:-2].values
y = dataset.iloc[:,-2].values

"""### Split data to train and test data ( to find accuracy ) """

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.3,random_state=0)

# testdata=pd.read_csv("test.csv")
# xtest= testdata.iloc[:,:-1].values
# ytest= testdata.iloc[:,-1].vaues

"""### Model selection 
###### Here i selected all as it is good practice to see all model

#####multiple linear regression
"""

from sklearn.linear_model import LinearRegression
multi = LinearRegression()
multi.fit(xtrain,ytrain)

"""#####decission tree regression"""

from sklearn.tree import DecisionTreeRegressor
decisn= DecisionTreeRegressor(random_state=0)
decisn.fit(xtrain,ytrain)

"""#####polynomial regression tree"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
pol_degree = PolynomialFeatures(degree= 3)
xpoly= pol_degree.fit_transform(xtrain)
poly= LinearRegression()
poly.fit(xpoly,ytrain)

"""#####support vector regression (SVR)
#####{***here we need to do feature scaling*** }

"""

# Feature scaling 
from sklearn.preprocessing import StandardScaler
scx= StandardScaler()
scy= StandardScaler()

xtrain_svr = scx.fit_transform(xtrain)
ytrain_svr = scy.fit_transform(ytrain.reshape(len(ytrain),1))


# training the model
from sklearn.svm import SVR
svr_mod= SVR(kernel = 'rbf')
svr_mod.fit(xtrain_svr,ytrain_svr)

"""##### random forest regression"""

from sklearn.ensemble import RandomForestRegressor
rand_forest= RandomForestRegressor(n_estimators = 10,random_state=0)
rand_forest.fit(xtrain,ytrain)

"""### Predicting with accuracy

###### multiple regression
"""

ypred_mul = multi.predict(xtest)
np.set_printoptions(precision=2)
print(np.concatenate((ypred_mul.reshape(len(ypred_mul),1), ytest.reshape(len(ytest),1)),1))
plt.scatter(ytest,ypred_mul)
plt.show()
# accuracy
from sklearn.metrics import r2_score
multi_accu=r2_score(ytest,ypred_mul)

"""##### decission tree """

ypred_dis= decisn.predict(xtest)
np.set_printoptions(precision=2)
print(np.concatenate((ypred_dis.reshape(len(ypred_dis),1), ytest.reshape(len(ytest),1)),1))
plt.scatter(ytest,ypred_dis)
plt.show()
#  accuracy
from sklearn.metrics import r2_score
dec_accu=r2_score(ytest,ypred_dis)

"""#####polynomial decission tree"""

ypred = poly.predict(pol_degree.transform(xtest))
np.set_printoptions(precision=2)
print(np.concatenate((ypred.reshape(len(ypred),1), ytest.reshape(len(ytest),1)),1))
plt.scatter(ytest,ypred)
plt.show()
# accuracy 
from sklearn.metrics import r2_score
pol_accu=r2_score(ytest,ypred)

"""#####SVR"""

ypred = scy.inverse_transform(svr_mod.predict(scx.transform(xtest)).reshape(len(ytest),1))
np.set_printoptions(precision=2)
print(np.concatenate((ypred.reshape(len(ypred),1), ytest.reshape(len(ytest),1)),1))

# Accuracy
from sklearn.metrics import r2_score
svr_accu=r2_score(ytest, ypred)

"""#####Random Forest regression"""

ypred= rand_forest.predict(xtest)
np.set_printoptions(precision=2)
print(np.concatenate((ypred.reshape(len(ypred),1), ytest.reshape(len(ytest),1)),1))
plt.scatter(ytest,ypred)
plt.show()
# accuracy
from sklearn.metrics import r2_score
ran_accu=r2_score(ytest, ypred)

print("Random forest regression predicts with accuracy of :" )
print(ran_accu)
print("SVR  regression predicts with accuracy of :" )
print(svr_accu)

print("polynomial regression predicts with accuracy of :" )
print(pol_accu)
print("Decision tree regression predicts with accuracy of :" )
print(dec_accu)
print("multiple  regression predicts with accuracy of :" )
print(multi_accu)

act=[multi_accu,pol_accu,svr_accu,dec_accu,ran_accu]
yaxixp=["multiple reggression","polynomial regression","SVR","Decission tree","Random forest reggression"]
plt.plot(yaxixp,act)
plt.scatter(yaxixp,act)
plt.show()





